function insert(bst, item) {
    // your answer here
    return is_empty_tree(bst)
           ? make_tree(item, make_empty_tree(), make_empty_tree())
           : item === entry(bst)
           ? bst
           : item < entry(bst)
           ? make_tree(entry(bst),
                       insert(left_branch(bst), item),
                       right_branch(bst))
           : // 
           make_tree(entry(bst),
                       left_branch(bst),
                       insert(right_branch(bst), item));

}


// Copy your binary_search_tree_to_string function here from Task 1.
function binary_search_tree_to_string(bst) {
    const string_with_names = "";

    return tree_to_string(bst, string_with_names);

}
 function tree_to_string(bst, strings){
    return is_empty_tree(bst)
    ? strings
    : tree_to_string(left_branch(bst), 
                            entry(bst) + "; " +
                            tree_to_string(right_branch(bst), strings));

 }

// Test

//binary_search_tree_to_string(insert(make_empty_tree(), "x"));
// Should produce "x; "

const bst = accumulate((item, bst) => insert(bst, item),
                       make_empty_tree(),
                       list("g", "a", "r", "x", "p"));
binary_search_tree_to_string(bst);
// Should produce "a; g; p; r; x; "

//const pkd_names_with_aaaaron =  insert(pkd_names, "AAAARON NORAAAA");
//binary_search_tree_to_string(pkd_names_with_aaaaron);
// Should produce "AAAARON NORAAAA; ..."
