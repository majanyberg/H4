//Maja Nyberg och Eric Buxton

function insert(bst, item) {
    // your answer here
    return is_empty_tree(bst)
           ? make_tree(item, make_empty_tree(), make_empty_tree())
           : item === entry(bst)
           ? bst
           : item > entry(bst)
           ? make_tree(entry(bst),
                left_branch(bst),
                    insert(right_branch(bst), item))
           : make_tree(entry(bst),
                insert(left_branch(bst), item),
                    right_branch(bst));

}

// Copy your binary_search_tree_to_string function here from Task 1.

function binary_search_tree_to_string(bst) {
    
    const semicolon = "; ";
    const nothing = "";
    
    function is_element_true(string_of_names, bst) {
        return is_empty_tree(bst) 
               ? string_of_names
               : is_element_true(entry(bst), left_branch(bst)) + 
                    semicolon + is_element_true(string_of_names, 
                        right_branch(bst));
    }
    return is_element_true(nothing, bst);
}
// Test

//binary_search_tree_to_string(insert(make_empty_tree(), "x"));
// Should produce "x; "

//const bst = accumulate((item, bst) => insert(bst, item),
                       //make_empty_tree(),
                       //list("g", "a", "r", "x", "p"));
//binary_search_tree_to_string(bst);
// Should produce "a; g; p; r; x; "

const pkd_names_with_aaaaron =  insert(pkd_names, "AAAARON NORAAAA");
binary_search_tree_to_string(pkd_names_with_aaaaron);
// Should produce "AAAARON NORAAAA; ..."
